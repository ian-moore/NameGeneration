<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;

namespace NameGeneration
{
    internal class NameCollections
    {
        public List<NameRange> MaleNames = new List<NameRange>()
        {
            #region MALE NAME DISTRIBUTIONS
            <#
        var lines = File.ReadAllLines(this.Host.ResolvePath("MaleFirstNames.txt")); 
        var rollingSum = 0;
        var nameProbabilities = new List<Tuple<string, int, int>>();
        foreach(var line in lines.Skip(2))
        {
            var parts = line.Split(null);
            var count = int.Parse(parts[2], NumberStyles.AllowThousands);
            var lowerBound = rollingSum+1;
            rollingSum += count;
            nameProbabilities.Add(Tuple.Create(parts[1], lowerBound, rollingSum));
        }
        foreach(var np in nameProbabilities)
        {
            #>new NameRange("<#=np.Item1#>", <#=np.Item2#>, <#=np.Item3#>),
            <# 
        }#>#endregion
        };

        public readonly int MaleFirstNameMax = <#=rollingSum#>;

        public List<NameRange> FemaleNames = new List<NameRange>()
        {
            #region FEMALE NAME DISTRIBUTIONS
            <#
        lines = File.ReadAllLines(this.Host.ResolvePath("FemaleFirstNames.txt")); 
        rollingSum = 0;
        nameProbabilities = new List<Tuple<string, int, int>>();
        foreach(var line in lines.Skip(2))
        {
            var parts = line.Split(null);
            var count = int.Parse(parts[2], NumberStyles.AllowThousands);
            var lowerBound = rollingSum+1;
            rollingSum += count;
            nameProbabilities.Add(Tuple.Create(parts[1], lowerBound, rollingSum));
        }
        foreach(var np in nameProbabilities)
        {
            #>new NameRange("<#=np.Item1#>", <#=np.Item2#>, <#=np.Item3#>),
            <# 
        }#>#endregion
        };

        public readonly int FemaleFirstNameMax = <#=rollingSum#>;

        public List<NameRange> LastNames = new List<NameRange>()
        {
            #region LAST NAME DISTRIBUTIONS
            <#
        lines = File.ReadAllLines(this.Host.ResolvePath("LastNames.txt")); 
        rollingSum = 0;
        nameProbabilities = new List<Tuple<string, int, int>>();
        foreach(var line in lines.Skip(2))
        {
            var parts = line.Split(null);
            var count = int.Parse(parts[2], NumberStyles.AllowThousands);
            var lowerBound = rollingSum+1;
            var name = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(parts[0].ToLower());
            rollingSum += count;
            nameProbabilities.Add(Tuple.Create(name, lowerBound, rollingSum));
        }
        foreach(var np in nameProbabilities)
        {
            #>new NameRange("<#=np.Item1#>", <#=np.Item2#>, <#=np.Item3#>),
            <# 
        }#>#endregion
        };

        public readonly int LastNameMax = <#=rollingSum#>;
    }
}